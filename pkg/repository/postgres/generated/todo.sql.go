// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: todo.sql

package tododb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todo WHERE id=$1
`

func (q *Queries) DeleteTodo(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, created_at, updated_at, title, description, completed FROM todo WHERE id=$1
`

func (q *Queries) GetTodo(ctx context.Context, id pgtype.UUID) (Todo, error) {
	row := q.db.QueryRow(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Completed,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT id, created_at, updated_at, title, description, completed FROM todo
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTodo = `-- name: InsertTodo :one
INSERT INTO todo (title, description, completed, created_at, updated_at) VALUES ($1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP) RETURNING id, created_at, updated_at, title, description, completed
`

type InsertTodoParams struct {
	Title       string
	Description pgtype.Text
	Completed   bool
}

func (q *Queries) InsertTodo(ctx context.Context, arg InsertTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, insertTodo, arg.Title, arg.Description, arg.Completed)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Completed,
	)
	return i, err
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todo  SET title=$1, description=$2, completed=$3, updated_at=CURRENT_TIMESTAMP WHERE id=$4 RETURNING updated_at
`

type UpdateTodoParams struct {
	Title       string
	Description pgtype.Text
	Completed   bool
	ID          pgtype.UUID
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (pgtype.Timestamp, error) {
	row := q.db.QueryRow(ctx, updateTodo,
		arg.Title,
		arg.Description,
		arg.Completed,
		arg.ID,
	)
	var updated_at pgtype.Timestamp
	err := row.Scan(&updated_at)
	return updated_at, err
}
